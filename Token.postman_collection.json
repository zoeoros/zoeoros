{
	"info": {
		"_postman_id": "1ba7068e-6c21-428e-a32b-3c3124ecda6b",
		"name": "Token",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "10608873"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Auth antigua (deprecada)",
					"item": [
						{
							"name": "Get Token OFI",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"// console.log(JSON.stringify(jsonObject[\"soap-env:Envelope\"][\"soap-env:Body\"][\"prefixRigel0:getLoggedUserTokenResponse\"][\"methodResult\"]));",
											"",
											"postman.setEnvironmentVariable(\"Authorization_Micro_BKS\", jsonObject[\"soap-env:Envelope\"][\"soap-env:Body\"][\"prefixRigel0:getLoggedUserTokenResponse\"][\"methodResult\"]);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:v1=\"http://www.isban.es/webservices/TECHNICAL_FACADES/Security/F_facseg_security/internet/ACFACSEGSecurity/v1\">\r\n  <soapenv:Header>\r\n     <wsse:Security\r\n     soap-env:actor=\"http://www.isban.es/soap/actor/wssecurityUserPass\"\r\n     soap-env:mustUnderstand=\"1\"\r\n     S12:role=\"wsssecurity\"\r\n     xmlns:wsse=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\r\n     xmlns:soap-env=\"http://schemas.xmlsoap.org/soap/envelope/\"\r\n     xmlns:S12=\"http://www.w3.org/2003/05/soap-envelope\">\r\n        <wsse:UsernameToken>\r\n           <wsse:Username>{{Estructural_OFI_usr}}</wsse:Username>\r\n           <wsse:Password>{{Estructural_OFI_pwd}}</wsse:Password>\r\n        </wsse:UsernameToken>\r\n     </wsse:Security>\r\n</soapenv:Header>\r\n  <soapenv:Body>\r\n     <v1:getLoggedUserToken facade=\"ACFACSEGSecurity\"/>\r\n  </soapenv:Body>\r\n</soapenv:Envelope>"
								},
								"url": "{{Estructural_OFI}}"
							},
							"response": []
						},
						{
							"name": "Get Token INTERNET",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"// console.log(JSON.stringify(jsonObject[\"soap-env:Envelope\"][\"soap-env:Body\"][\"prefixRigel0:getLoggedUserTokenResponse\"][\"methodResult\"]));",
											"",
											"postman.setEnvironmentVariable(\"Authorization_Micro_BKS\", jsonObject[\"soap-env:Envelope\"][\"soap-env:Body\"][\"prefixRigel0:authenticateCredentialResponse\"][\"methodResult\"][\"tokenCredential\"]);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:v1=\"http://www.isban.es/webservices/TECHNICAL_FACADES/Security/F_facseg_security/internet/loginServicesNSegSAN/v1\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <v1:authenticateCredential facade=\"loginServicesNSegSAN\">\r\n         <CB_AuthenticationData>\r\n            <password>{{Estructural_INT_pwd}}</password>\r\n            <documento>\r\n               <TIPO_DOCUM_PERSONA_CORP>N</TIPO_DOCUM_PERSONA_CORP>\r\n               <CODIGO_DOCUM_PERSONA_CORP>{{Estructural_INT_usr}}</CODIGO_DOCUM_PERSONA_CORP>\r\n            </documento>\r\n         </CB_AuthenticationData>\r\n      </v1:authenticateCredential>\r\n   </soapenv:Body>\r\n</soapenv:Envelope> "
								},
								"url": "{{Estructural_INT}}"
							},
							"response": []
						},
						{
							"name": "Get Token EMP",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"// console.log(JSON.stringify(jsonObject[\"soap-env:Envelope\"][\"soap-env:Body\"][\"prefixRigel0:getLoggedUserTokenResponse\"][\"methodResult\"]));",
											"",
											"postman.setEnvironmentVariable(\"Authorization_Micro_BKS\", jsonObject[\"soap-env:Envelope\"][\"soap-env:Body\"][\"prefixRigel0:getLoggedUserTokenResponse\"][\"methodResult\"]);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:v1=\"http://www.isban.es/webservices/TECHNICAL_FACADES/Security/F_facseg_security/internet/ACFACSEGSecurity/v1\">\r\n  <soapenv:Header>\r\n     <wsse:Security\r\n     soap-env:actor=\"http://www.isban.es/soap/actor/wssecurityUserPass\"\r\n     soap-env:mustUnderstand=\"1\"\r\n     S12:role=\"wsssecurity\"\r\n     xmlns:wsse=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\r\n     xmlns:soap-env=\"http://schemas.xmlsoap.org/soap/envelope/\"\r\n     xmlns:S12=\"http://www.w3.org/2003/05/soap-envelope\">\r\n        <wsse:UsernameToken>\r\n           <wsse:Username>{{Estructural_EMP_usr}}</wsse:Username>\r\n           <wsse:Password>{{Estructural_EMP_pwd}}</wsse:Password>\r\n        </wsse:UsernameToken>\r\n     </wsse:Security>\r\n</soapenv:Header>\r\n  <soapenv:Body>\r\n     <v1:getLoggedUserToken facade=\"ACFACSEGSecurity\"/>\r\n  </soapenv:Body>\r\n</soapenv:Envelope>"
								},
								"url": "{{Estructural_EMP}}"
							},
							"response": []
						},
						{
							"name": "STS BKS -> JWT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"Authorization_Micro\", \"Bearer \" + jsonData.token);",
											"postman.setEnvironmentVariable(\"Authorization_Micro_JWT\", jsonData.token);",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"if (responseCode.code == 200){",
											"    var responseData = JSON.parse(responseBody);",
											"    tests[responseData.scope] =  true;",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "credentialType",
										"value": "TOKEN"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"credential\": \"{{Authorization_Micro_BKS}}\"\n}"
								},
								"url": "{{STS_Endpoint}}/tokens/jwt"
							},
							"response": []
						},
						{
							"name": "STS JWT -> BKS",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"token\": \"{{Authorization_Micro_JWT}}\"\n}"
								},
								"url": "{{STS_Endpoint}}/tokens/bks/personal"
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Token INTERNET",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Guarda credenciales\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    postman.setEnvironmentVariable(\"Authorization_Micro\", \"Bearer \" + jsonData.jwt);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"name": "Content-Type"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"credentialType\": [\n        \"JWT\"\n    ],\n    \"idAttributes\": {\n        \"documentType\": \"N\",\n        \"documentCode\": \"{{Estructural_INT_usr}}\"\n    },\n    \"password\": \"{{Estructural_INT_pwd}}\",\n    \"realm\": \"SantanderParticulares\"\n}"
						},
						"url": "{{SSCC_Endpoint}}/authenticate/credentials"
					},
					"response": []
				},
				{
					"name": "Get Token OFI",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Guarda credenciales\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    postman.setEnvironmentVariable(\"Authorization_Micro\", \"Bearer \" + jsonData.jwt);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"name": "Content-Type"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"credentialType\": [\n        \n    ],\n    \"idAttributes\": {\n        \"uid\": \"{{Estructural_OFI_usr}}\"\n    },\n    \"password\": \"{{Estructural_OFI_pwd}}\",\n    \"realm\": \"SantanderBCE\"\n}"
						},
						"url": "{{SSCC_Endpoint}}/authenticate/credentials"
					},
					"response": []
				},
				{
					"name": "Get Token OFI Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Guarda credenciales\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    postman.setEnvironmentVariable(\"Authorization_Micro\", \"Bearer \" + jsonData.jwt);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"credentialType\": [\n        \n    ],\n    \"idAttributes\": {\n        \"uid\": \"aplSGPMVA\"\n    },\n    \"password\": \"WBwyrwk2\",\n    \"realm\": \"SantanderBCE\"\n}"
						},
						"url": "{{SSCC_Endpoint}}/authenticate/credentials"
					},
					"response": []
				},
				{
					"name": "Get Token OFI New",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Guarda credenciales\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    postman.setEnvironmentVariable(\"Authorization_Micro\", \"Bearer \" + jsonData.jwt);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"name": "Content-Type"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"credentialType\": [\n        \"JWT\"\n    ],\n    \"idAttributes\": {\n        \"uid\": \"{{Estructural_OFI_usr}}\"\n    },\n    \"password\": \"{{Estructural_OFI_pwd}}\",\n    \"realm\": \"SantanderBCE\"\n}"
						},
						"url": "{{SSCC_Endpoint}}/authenticate/credentials"
					},
					"response": []
				},
				{
					"name": "Get Token EMP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Guarda credenciales\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    postman.setEnvironmentVariable(\"Authorization_Micro\", \"Bearer \" + jsonData.jwt);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"name": "Content-Type"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"credentialType\": [\n        \"JWT\"\n    ],\n    \"idAttributes\": {\n        \"alias\": \"{{Estructural_EMP_usr}}\"\n    },\n    \"password\": \"{{Estructural_EMP_pwd}}\",\n    \"realm\": \"SantanderEmpresas\"\n}"
						},
						"url": "{{SSCC_Endpoint}}/authenticate/credentials"
					},
					"response": []
				}
			]
		}
	]
}